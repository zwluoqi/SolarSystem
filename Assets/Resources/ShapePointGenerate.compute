// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMainVertices
// #pragma kernel CSMainTriangle

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float3> vertices;

RWTexture2D<int> triangles;

int Resolution;
float3 axisB;
float3 axisA;
float3 Normal;

[numthreads(8,8,1)]
void CSMainVertices (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    // vertices[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    // int index = id.x + id.y * (Resolution);
    float2 percent = float2(id.x, id.y) / (Resolution - 1);
    float3 pos = Normal+2*axisB * (percent.x - 0.5f) + 2*axisA * (percent.y - 0.5f);
    vertices[id.xy] =normalize(pos);

    
}

// [numthreads(8,1,1)]
// void CSMainTriangle (uint3 id : SV_DispatchThreadID)
// {
//     int index = id.x;
//     int indicIndex = index*6;
//     if (id.x < Resolution - 1 && id.y < Resolution - 1)
//     {
//         //逆时针
//         triangles[indicIndex+0] = index;
//         triangles[indicIndex+1] = index+Resolution;
//         triangles[indicIndex+2] = index+1+Resolution;
//                         
//         triangles[indicIndex+3] = index+1+Resolution;
//         triangles[indicIndex+4] = index+1;
//         triangles[indicIndex+5] = index;
//     }
// }
